// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoggedInContent Page - Should initial load with direct link to profile page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/profile",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(ProfilePage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should initial load with direct link to project 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "projectId": "123",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          getProjectMembers={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          location={
            Object {
              "pathname": "/inception/123",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
              projectId="123"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should initial load with direct link to project and ending slash 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "projectId": "123",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          getProjectMembers={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          location={
            Object {
              "pathname": "/inception/123/",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
              projectId="123"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should initial load with direct link to project then update page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "projectId": "123",
                  },
                ],
                Array [
                  Object {
                    "projectId": "123",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          getProjectMembers={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          location={
            Object {
              "pathname": "/inception/123",
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {
                "projectId": "123",
              },
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
                Array [
                  "123",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
              projectId="123"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should initial load with direct link to project then update project 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "projectId": "123",
                  },
                ],
                Array [
                  Object {
                    "projectId": "456",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          getProjectMembers={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
                Array [
                  "456",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          location={
            Object {
              "pathname": "/inception/456",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={
            [MockFunction] {
              "calls": Array [
                Array [
                  "123",
                ],
                Array [
                  "456",
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
              projectId="456"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render 404 for non-existent page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/carrot",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <lazy />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render foundations page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/foundations",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(FoundationsPage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render newproject page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/newproject",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(NewProjectPage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render no project selected 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/inception",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render no project selected at mobile resolution 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/inception",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(StagePage))
              pageName="inception"
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render no project selected at mobile resolution with error 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/inception",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
              "error": "There was an error",
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <lazy
              text="The requested project ID was not found in the system.  Please select or create a project using the project drop down."
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render profile page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={false}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/profile",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(ProfilePage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render project page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/project",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(ProjectDetailsPage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render team page 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/team",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <withRouter(Connect(ProjectTeamPage)) />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;

exports[`LoggedInContent Page - Should render then have an error fetching a project 1`] = `
<div
  className="full-width row"
  id="logged-in-content-container"
>
  <withRouter(Connect(HeaderBar))
    companyName="Prin-D"
    openProjectSelector={true}
  />
  <ErrorBoundary
    onRetry={[Function]}
  >
    <Suspense
      fallback={
        <ProjectLoading
          text="Loading page data"
        />
      }
    >
      <lazy
        noFoundationsBannerShowing={true}
      >
        <lazy
          checkServerAccessToProcore={[MockFunction]}
          getProjectDetails={[MockFunction]}
          getProjectMembers={[MockFunction]}
          location={
            Object {
              "pathname": "/inception",
              "state": Object {},
            }
          }
          procore={
            Object {
              "companyId": "TestCompanyId",
              "projectId": "TestProjectId",
            }
          }
          projects={
            Object {
              "chosenProject": Object {},
              "error": "There was an error",
            }
          }
          resetSite={[MockFunction]}
          saveProjectID={[MockFunction]}
          user={
            Object {
              "details": Object {},
            }
          }
        />
        <lazy>
          <Suspense
            fallback={
              <ProjectLoading
                text="Loading page data"
              />
            }
          >
            <lazy
              text="The requested project ID was not found in the system.  Please select or create a project using the project drop down."
            />
          </Suspense>
        </lazy>
      </lazy>
    </Suspense>
  </ErrorBoundary>
  <lazy />
</div>
`;
